name: Self-Healing CI/CD

on:
  workflow_run:
    workflows: ["Flutter CI/CD"]
    types: [completed]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: write
  issues: write
  workflows: write
  packages: read
  metadata: read

env:
  MAX_RETRIES: 5
  OPENAI_MODEL: gpt-4
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  FIX_BRANCH_PREFIX: ai-fix/attempt

jobs:
  analyze-and-fix:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai PyGithub pyyaml

      - name: Download workflow logs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create logs directory
          New-Item -ItemType Directory -Force -Path .github/logs
          
          # Download logs
          python .github/scripts/download_logs.py \
            --run-id ${{ github.event.workflow_run.id }} \
            --token "$GH_TOKEN" \
            --output .github/logs/workflow_logs.txt
          
          # Verify file creation and content
          if (-not (Test-Path .github/logs/workflow_logs.txt)) {
            Write-Error "Error: workflow_logs.txt was not created"
            exit 1
          }
          
          if ((Get-Item .github/logs/workflow_logs.txt).length -eq 0) {
            Write-Error "Error: workflow_logs.txt is empty"
            exit 1
          }

      - name: Create Fix Branch
        run: |
          ATTEMPT=$(python .github/scripts/get_attempt_number.py)
          BRANCH="${{ env.FIX_BRANCH_PREFIX }}-${ATTEMPT}"
          git checkout -b "$BRANCH"
          echo "FIX_BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "FIX_ATTEMPT=$ATTEMPT" >> $GITHUB_ENV

      - name: Analyze and Fix Workflow
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python .github/scripts/fix_workflow.py \
            --workflow-file .github/workflows/flutter_ci.yml \
            --logs .github/logs/workflow_logs.txt \
            --max-retries $MAX_RETRIES \
            --openai-model "$OPENAI_MODEL" \
            --branch "$FIX_BRANCH" \
            --attempt "$FIX_ATTEMPT"

      - name: Create Fix Summary
        if: always()
        run: |
          python .github/scripts/create_summary.py \
            --logs .github/logs/workflow_logs.txt \
            --output fix_summary.md

      - name: Create Pull Request
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --base main \
            --head "$FIX_BRANCH" \
            --title "AI: Fix attempt #${FIX_ATTEMPT} for workflow issues" \
            --body-file fix_summary.md \
            --label "ai-fix-attempt" \
            --label "automated-pr"
